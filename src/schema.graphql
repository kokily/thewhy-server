type LoginResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  Login(password: String!): LoginResponse!
  Logout: LogoutResponse!
  Register(password: String!): RegisterResponse!
  AddNotice(title: String!, body: String!): AddNoticeResponse!
  RemoveNotice(id: ID!): RemoveNoticeResponse!
  UpdateNotice(id: ID!, title: String, body: String): UpdateNoticeResponse!
  AddQuestion(name: String!, password: String!, phone: String, email: String, title: String!, body: String!): AddQuestionResponse!
  RemoveQuestion(id: ID!, password: String!): RemoveQuestionResponse!
  UpdateQuestion(id: ID!, password: String!, name: String, phone: String, email: String, title: String, body: String): UpdateQuestionResponse!
  AddReply(body: String!, questionId: ID!): AddReplyResponse!
  RemoveReply(id: ID!): RemoveReplyResponse!
  UpdateReply(id: ID!, body: String): UpdateReplyResponse!
  AddStory(title: String!, body: String!, thumbnail: String, tags: [String]): AddStoryResponse!
  RemoveStory(id: ID!): RemoveStoryResponse!
  UpdateStory(id: ID!, title: String, body: String, thumbnail: String, tags: [String]): UpdateStoryResponse!
}

type LogoutResponse {
  ok: Boolean!
  error: String
}

type Me {
  adminId: String
}

type MeResponse {
  ok: Boolean!
  error: String
  me: Me
}

type Query {
  Me: MeResponse!
  ListNotice(page: Int): ListNoticeResponse!
  ReadNotice(id: ID!): ReadNoticeResponse!
  ListQuestions(page: Int): ListQuestionsResponse!
  ListStories(title: String, tag: String, cursor: ID): ListStoriesResponse!
  ReadStory(id: ID!): ReadStoryResponse!
}

type RegisterResponse {
  ok: Boolean!
  error: String
}

type AddNoticeResponse {
  ok: Boolean!
  error: String
}

type ListNoticeResponse {
  ok: Boolean!
  error: String
  notice: [Notice]
  lastPage: Int!
}

type ReadNoticeResponse {
  ok: Boolean!
  error: String
  notice: Notice
}

type RemoveNoticeResponse {
  ok: Boolean!
  error: String
}

type UpdateNoticeResponse {
  ok: Boolean!
  error: String
}

type AddQuestionResponse {
  ok: Boolean!
  error: String
}

type ListQuestionsResponse {
  ok: Boolean!
  error: String
  questions: [Question]
  lastPage: Int!
}

type RemoveQuestionResponse {
  ok: Boolean!
  error: String
}

type UpdateQuestionResponse {
  ok: Boolean!
  error: String
}

type AddReplyResponse {
  ok: Boolean!
  error: String
}

type RemoveReplyResponse {
  ok: Boolean!
  error: String
}

type UpdateReplyResponse {
  ok: Boolean!
  error: String
}

scalar Date

type Admin {
  id: ID!
  username: String!
  password: String!
  created_at: Date!
}

type Notice {
  id: ID!
  num: Int!
  title: String!
  body: String!
  created_at: Date!
  updated_at: Date
}

type Question {
  id: ID!
  name: String!
  password: String!
  phone: String
  email: String
  isReply: Boolean!
  title: String!
  body: String!
  replyId: String
  reply: Reply
  created_at: Date!
  updated_at: Date
}

type Reply {
  id: ID!
  body: String!
  questionId: String
  question: Question
  created_at: Date!
  updated_at: Date
}

type Story {
  id: ID!
  title: String!
  body: String!
  thumbnail: String
  tags: [String]
  created_at: Date!
  updated_at: Date
}

type AddStoryResponse {
  ok: Boolean!
  error: String
  story: Story
}

type ListStoriesResponse {
  ok: Boolean!
  error: String
  stories: [Story]
}

type ReadStoryResponse {
  ok: Boolean!
  error: String
  story: Story
}

type RemoveStoryResponse {
  ok: Boolean!
  error: String
}

type UpdateStoryResponse {
  ok: Boolean!
  error: String
}
